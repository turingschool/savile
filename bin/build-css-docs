#!/usr/bin/env ruby

require "crass"
require "pp"
require "yaml"
require "FileUtils"
require "sassc"

ROOT_DIR = File.absolute_path('..', __dir__)
LOAD_DIR = File.join(ROOT_DIR, 'css/design_system')
LOAD_FILE = File.join(LOAD_DIR, 'index.scss')
DESTINATION_DIR = File.join(ROOT_DIR, '_data')

ALL_DOCS = []
CATEGORY_ORDER = Hash.new(0)

def extract_docs_from_css(tree)
  prev_comment = nil

  tree.each do |node|
    if node[:children]
      extract_docs_from_css(node[:children])
    end

    # only parse comment starting with /** (NOT /*)
    if node[:node] == :comment && node[:value][0] == '*'
      prev_comment = clean_comment node[:value]
    end

    if prev_comment
      doc = parse_attributes(prev_comment)
      doc['category'] = (doc['category'] || 'misc').downcase

      # keeps declarations in order of where they are defined in docs file
      doc['order'] = doc['order']&.to_i || CATEGORY_ORDER[doc['category']]
      CATEGORY_ORDER[doc['category']] = doc['order'] + 1

      unless doc['title']
        doc['title'] = node.dig(:selector, :value) if node[:node] == :style_rule
        doc['title'] = node[:name] if node[:node] == :property
      end

      ALL_DOCS << doc

      prev_comment = nil
    end
  end
end

def parse_attributes(docstring)
  attrs = {}
  example = nil

  names_and_values = docstring.strip.split(/\s*@(\w+)\s+/)
  names_and_values.shift if names_and_values.first.empty?

  Hash[names_and_values.each_slice(2).to_a]
end

def write_data_files(docs)
  data_folder = File.join(ROOT_DIR, '_data')
  disclaimer = "# -- WARNING! This file is generated programmatically. DO NOT EDIT DIRECTLY --\n"

  by_category = docs.group_by { |doc| doc['category'] }
  by_category.each_pair do |category, docs|
    puts category
    filepath = File.join(DESTINATION_DIR, category + '.yml')
    File.write(filepath, disclaimer + docs.to_yaml)
  end
end

def clean_comment(comment_text)
  comment_text.lines.map { |l| l.sub(/^\s*\*\s?/, '') }.join
end

scss = File.read(LOAD_FILE)
css = SassC::Engine.new(scss, load_paths: [LOAD_DIR]).render
tree = ::Crass.parse(css, :preserve_comments => true)

extract_docs_from_css(tree)
write_data_files(ALL_DOCS)
